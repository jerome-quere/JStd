// Generated by CoffeeScript 1.4.0
(function() {
  var jstd,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jstd = (function() {

    function jstd() {}

    return jstd;

  })();

  jstd.exception = (function() {

    function exception() {
      this.message = this.what();
    }

    exception.prototype.what = function() {
      return "exception";
    };

    return exception;

  })();

  jstd.logic_error = (function(_super) {

    __extends(logic_error, _super);

    function logic_error() {
      return logic_error.__super__.constructor.apply(this, arguments);
    }

    logic_error.prototype.what = function() {
      return "logic_error";
    };

    return logic_error;

  })(jstd.exception);

  jstd.out_of_range = (function(_super) {

    __extends(out_of_range, _super);

    function out_of_range() {
      return out_of_range.__super__.constructor.apply(this, arguments);
    }

    out_of_range.prototype.what = function() {
      return "out_of_range";
    };

    return out_of_range;

  })(jstd.logic_error);

  jstd.iterator = (function() {

    iterator.TYPE_INPUT = 1;

    iterator.TYPE_OUTPUT = 2;

    iterator.TYPE_FORWARD = 3;

    iterator.TYPE_BIDIRECTIONAL = 4;

    iterator.TYPE_RANDOM = 5;

    function iterator(type) {
      this.type = type;
    }

    iterator.prototype.getType = function() {
      return this.type;
    };

    return iterator;

  })();

  jstd.advance = function(i, n) {
    var _i, _results;
    if (i.getType() === jstd.iterator.TYPE_RANDOM) {
      i.copy(i.add(n));
      return;
    }
    _results = [];
    for (i = _i = 0; 0 <= n ? _i <= n : _i >= n; i = 0 <= n ? ++_i : --_i) {
      _results.push(i.next());
    }
    return _results;
  };

  jstd.distance = function(first, second) {
    var i;
    if (first.getType() === jstd.iterator.TYPE_RANDOM) {
      return Math.abs(second.value() - first.value());
    }
    first = first.clone();
    i = 0;
    while (first.neq(second)) {
      first.next();
      ++i;
    }
    return i;
  };

  jstd.reverse_iterator = (function(_super) {

    __extends(reverse_iterator, _super);

    function reverse_iterator(baseIt) {
      reverse_iterator.__super__.constructor.call(this, baseIt.getType());
      this.baseIt = baseIt.clone();
    }

    reverse_iterator.prototype.clone = function() {
      return new reverse_iterator(this.baseIt);
    };

    reverse_iterator.prototype.copy = function(obj) {
      var i;
      i = obj.clone();
      return this.swap(i);
    };

    reverse_iterator.prototype.swap = function(obj) {
      var _ref;
      return _ref = [obj.baseIt, this.baseIt], this.baseIt = _ref[0], obj.baseIt = _ref[1], _ref;
    };

    reverse_iterator.prototype.base = function() {
      return this.baseIt;
    };

    reverse_iterator.prototype.get = function() {
      return this.baseIt.sub(1).get();
    };

    reverse_iterator.prototype.set = function(value) {
      return this.baseIt.sub(1).set(value);
    };

    reverse_iterator.prototype.value = function() {
      return this.baseIt.sub(1).value();
    };

    reverse_iterator.prototype.next = function() {
      return this.baseIt.prev();
    };

    reverse_iterator.prototype.prev = function() {
      return this.baseIt.next();
    };

    reverse_iterator.prototype.eq = function(it) {
      return this.baseIt.eq(it.baseIt);
    };

    reverse_iterator.prototype.lt = function(it) {
      return this.baseIt.lt(it.baseIt);
    };

    reverse_iterator.prototype.neq = function(it) {
      return !this.eq(it);
    };

    reverse_iterator.prototype.lte = function(it) {
      return this.lt(it) || this.eq(it);
    };

    reverse_iterator.prototype.gt = function(it) {
      return !this.lte(it);
    };

    reverse_iterator.prototype.gte = function(it) {
      return this.gt(it) || this.eq(it);
    };

    reverse_iterator.prototype.add = function(n) {
      return new reverse_iterator(this.baseIt.sub(n));
    };

    reverse_iterator.prototype.sub = function(n) {
      return new reverse_iterator(this.baseIt.add(n));
    };

    return reverse_iterator;

  })(jstd.iterator);

  jstd.inserter = function(container, it) {
    return new jstd.insert_iterator(container, it);
  };

  jstd.back_inserter = function(container) {
    return new jstd.back_insert_iterator(container);
  };

  jstd.front_inserter = function(container) {
    return new jstd.front_insert_iterator(container);
  };

  jstd.insert_iterator = (function(_super) {

    __extends(insert_iterator, _super);

    function insert_iterator(container, it) {
      this.container = container;
      this.it = it;
      insert_iterator.__super__.constructor.call(this, jstd.iterator.TYPE_OUTPUT);
    }

    insert_iterator.prototype.clone = function() {
      return new insert_iterator(this.container, this.it);
    };

    insert_iterator.prototype.copy = function(obj) {
      return this.swap(obj.clone());
    };

    insert_iterator.prototype.get = function() {};

    insert_iterator.prototype.set = function(value) {
      return this.it = this.container.insert(this.it, value);
    };

    insert_iterator.prototype.next = function() {};

    return insert_iterator;

  })(jstd.iterator);

  jstd.back_insert_iterator = (function(_super) {

    __extends(back_insert_iterator, _super);

    function back_insert_iterator(container) {
      this.container = container;
      back_insert_iterator.__super__.constructor.call(this, jstd.iterator.TYPE_OUTPUT);
    }

    back_insert_iterator.prototype.clone = function() {
      return new back_insert_iterator(this.container);
    };

    back_insert_iterator.prototype.copy = function(obj) {
      return this.swap(obj.clone());
    };

    back_insert_iterator.prototype.get = function() {};

    back_insert_iterator.prototype.set = function(value) {
      return this.container.push_back(value);
    };

    back_insert_iterator.prototype.next = function() {};

    return back_insert_iterator;

  })(jstd.iterator);

  jstd.front_insert_iterator = (function(_super) {

    __extends(front_insert_iterator, _super);

    function front_insert_iterator(container) {
      this.container = container;
      front_insert_iterator.__super__.constructor.call(this, jstd.iterator.TYPE_OUTPUT);
    }

    front_insert_iterator.prototype.clone = function() {
      return new front_insert_iterator(this.container);
    };

    front_insert_iterator.prototype.copy = function(obj) {
      return this.swap(obj.clone());
    };

    front_insert_iterator.prototype.get = function() {};

    front_insert_iterator.prototype.set = function(value) {
      return this.container.push_front(value);
    };

    front_insert_iterator.prototype.next = function() {};

    return front_insert_iterator;

  })(jstd.iterator);

  jstd.accumulate = function(first, last, init) {
    if (init == null) {
      init = 0;
    }
    first = first.clone();
    while (first.neq(last)) {
      init = init + first.get();
      first.next();
    }
    return init;
  };

  jstd.for_each = function(first, last, f) {
    while (first.neq(last)) {
      f(first.get());
      first.next();
    }
    return f;
  };

  jstd.min = function(obj1, obj2) {
    if (typeof obj1 === "number" || typeof obj1 === "bool" || typeof obj1 === "string" || obj1 instanceof Array) {
      if (!(obj2 < obj1)) {
        return obj1;
      } else {
        return obj2;
      }
    }
    if (!(obj2.lt(obj1))) {
      return obj1;
    } else {
      return obj2;
    }
  };

  jstd.max = function(obj1, obj2) {
    if (typeof obj1 === "number" || typeof obj1 === "bool" || typeof obj1 === "string" || obj1 instanceof Array) {
      if (obj1 < obj2) {
        return obj2;
      } else {
        return obj1;
      }
    }
    if (obj1.lt(obj2)) {
      return obj2;
    } else {
      return obj1;
    }
  };

  jstd.copy = function(first, last, it) {
    first = first.clone();
    it = it.clone();
    while (first.neq(last)) {
      it.set(first.get());
      first.next();
      it.next();
    }
    return it;
  };

  jstd.fill_n = function(first, n, v) {
    var i, _results;
    first = first.clone();
    i = 0;
    _results = [];
    while (i < n) {
      first.set(v);
      first.next();
      _results.push(i++);
    }
    return _results;
  };

  jstd.vector = (function() {

    function vector() {
      this.array = [];
    }

    vector.prototype.clone = function() {
      var v;
      v = new jstd.vector();
      v.insertRange(v.begin(), this.begin(), this.end());
      return v;
    };

    vector.prototype.copy = function(obj) {
      var v;
      v = obj.clone();
      return this.swap(obj);
    };

    vector.prototype.at = function(idx) {
      if (idx < 0 || idx >= this.size()) {
        throw new jstd.out_of_range();
      }
      return this.get(idx);
    };

    vector.prototype.get = function(idx) {
      return this.array[idx];
    };

    vector.prototype.set = function(idx, value) {
      return this.array[idx] = value;
    };

    vector.prototype.back = function() {
      return this.array[this.size() - 1];
    };

    vector.prototype.front = function() {
      return this.array[0];
    };

    vector.prototype.data = function() {
      return this.array;
    };

    vector.prototype.push_back = function(value) {
      return this.array.push(value);
    };

    vector.prototype.pop_back = function(value) {
      return this.array.pop();
    };

    vector.prototype.size = function() {
      return this.array.length;
    };

    vector.prototype.empty = function() {
      return this.size() === 0;
    };

    vector.prototype.resize = function(size) {
      var _results;
      if (size < 0) {
        size = 0;
      }
      if (size < this.size()) {
        this.array.splice(size, this.size());
      }
      _results = [];
      while (this.size() < size) {
        _results.push(this.array.push(null));
      }
      return _results;
    };

    vector.prototype.clear = function() {
      return this.resize(0);
    };

    vector.prototype.swap = function(obj) {
      var _ref, _ref1;
      _ref = [obj.array, this.array], this.array = _ref[0], obj.array = _ref[1];
      return _ref1 = [obj.idx, this.idx], this.idx = _ref1[0], obj.idx = _ref1[1], _ref1;
    };

    vector.prototype.begin = function() {
      return new this.iterator(this, 0);
    };

    vector.prototype.end = function() {
      return new this.iterator(this, this.size());
    };

    vector.prototype.rbegin = function() {
      return new jstd.reverse_iterator(this.end());
    };

    vector.prototype.rend = function() {
      return new jstd.reverse_iterator(this.begin());
    };

    vector.prototype.insert = function(it, value) {
      this.array.splice(it.value(), 0, value);
      return it.add(1);
    };

    vector.prototype.insertRange = function(it, first, last) {
      return jstd.copy(first, last, jstd.inserter(this, it));
    };

    vector.prototype.erase = function(it) {
      return this.array.splice(it.value(), 1);
    };

    vector.prototype.eraseRange = function(first, last) {
      var _ref;
      if (last.value() < first.value()) {
        _ref = [last.base(), first.base()], first = _ref[0], last = _ref[1];
      }
      return this.array.splice(first.value(), Math.abs(first.idx - last.idx));
    };

    vector.prototype.iterator = (function(_super) {

      __extends(iterator, _super);

      function iterator(vector, idx) {
        this.vector = vector;
        this.idx = idx;
        iterator.__super__.constructor.call(this, jstd.iterator.TYPE_RANDOM);
      }

      iterator.prototype.clone = function() {
        return new iterator(this.vector, this.idx);
      };

      iterator.prototype.copy = function(obj) {
        var i;
        i = obj.clone();
        return this.swap(i);
      };

      iterator.prototype.swap = function(obj) {
        var _ref, _ref1;
        _ref = [obj.vector, this.vector], this.vector = _ref[0], obj.vector = _ref[1];
        return _ref1 = [obj.idx, this.idx], this.idx = _ref1[0], obj.idx = _ref1[1], _ref1;
      };

      iterator.prototype.get = function() {
        return this.vector.get(this.idx);
      };

      iterator.prototype.set = function(value) {
        return this.vector.set(this.idx, value);
      };

      iterator.prototype.value = function() {
        return this.idx;
      };

      iterator.prototype.next = function() {
        return this.idx++;
      };

      iterator.prototype.prev = function() {
        return this.idx--;
      };

      iterator.prototype.eq = function(it) {
        return this.idx === it.idx;
      };

      iterator.prototype.lt = function(it) {
        return this.idx < it.idx;
      };

      iterator.prototype.neq = function(it) {
        return !this.eq(it);
      };

      iterator.prototype.lte = function(it) {
        return this.lt(it) || this.eq(it);
      };

      iterator.prototype.gt = function(it) {
        return !this.lte(it);
      };

      iterator.prototype.gte = function(it) {
        return this.gt(it) || this.eq(it);
      };

      iterator.prototype.add = function(v) {
        return new iterator(this.vector, this.idx + v);
      };

      iterator.prototype.sub = function(v) {
        return new iterator(this.vector, this.idx - v);
      };

      return iterator;

    })(jstd.iterator);

    return vector;

  })();

  module.exports = jstd;

}).call(this);

// Generated by CoffeeScript 1.4.0
(function() {
  var assert, jstl;

  assert = require("assert");

  jstl = require('../../dist/jstl.js');

  describe('vector', function() {
    describe('#at()', function() {
      return it('access specified element with bounds checking ', function() {
        var i, v, _i, _j;
        v = new jstl.vector();
        for (i = _i = 0; _i <= 10; i = ++_i) {
          v.push_back(i);
        }
        for (i = _j = 0; _j <= 10; i = ++_j) {
          assert.equal(v.at(i), i);
        }
        assert.throws((function() {
          return v.at(-1);
        }), "out_of_range");
        assert.doesNotThrow(function() {
          return v.at(9);
        });
        return assert.throws((function() {
          return v.at(10);
        }), "out_of_range");
      });
    });
    describe('#get()', function() {
      return it('should return the value located at the correct index', function() {
        var i, v, _i, _j, _results;
        v = new jstl.vector();
        for (i = _i = 0; _i <= 10; i = ++_i) {
          v.push_back(i);
        }
        _results = [];
        for (i = _j = 0; _j <= 10; i = ++_j) {
          _results.push(assert.equal(v.at(i), i));
        }
        return _results;
      });
    });
    describe('#back()', function() {
      return it('should access the last element', function() {
        var i, v, _i, _results;
        v = new jstl.vector();
        _results = [];
        for (i = _i = 0; _i <= 10; i = ++_i) {
          v.push_back(i);
          _results.push(assert.equal(v.back(), i));
        }
        return _results;
      });
    });
    describe('#front()', function() {
      return it('should access the first element ', function() {
        var i, v, _i, _results;
        v = new jstl.vector();
        _results = [];
        for (i = _i = 0; _i <= 10; i = ++_i) {
          v.push_back(i);
          _results.push(assert.equal(v.front(), 0));
        }
        return _results;
      });
    });
    describe('#size()', function() {
      return it('should returns the number of elements ', function() {
        var i, v, _i, _results;
        v = new jstl.vector();
        _results = [];
        for (i = _i = 0; _i <= 10; i = ++_i) {
          v.push_back(i);
          _results.push(assert.equal(v.size(), i + 1));
        }
        return _results;
      });
    });
    describe('#empty()', function() {
      return it('should checks whether the container is empty', function() {
        var v;
        v = new jstl.vector();
        assert.equal(v.empty(), true);
        v.push_back(1);
        assert.equal(v.empty(), false);
        v.pop_back();
        return assert.equal(v.empty(), true);
      });
    });
    describe('#resize', function() {
      return it('should changes the number of elements stored', function() {
        var i, v, _i;
        v = new jstl.vector();
        for (i = _i = 0; _i <= 10; i = ++_i) {
          v.push_back(i);
        }
        v.resize(5);
        assert.equal(v.size(), 5);
        v.resize(-1);
        return assert.equal(v.size(), 0);
      });
    });
    describe('#clear', function() {
      return it('should clears the contents', function() {
        var i, v, _i;
        v = new jstl.vector();
        for (i = _i = 0; _i <= 10; i = ++_i) {
          v.push_back(i);
        }
        v.clear();
        return assert.equal(v.empty(), true);
      });
    });
    describe('#iterator', function() {
      return it('should allow to iterate throught the vector', function() {
        var i, v, _i;
        v = new jstl.vector();
        for (i = _i = 0; _i <= 10; i = ++_i) {
          v.push_back(i);
        }
        i = 0;
        return jstl.foreach(v.begin(), v.end(), function(e) {
          assert.equal(e, i);
          return i++;
        });
      });
    });
    describe('#riterator', function() {
      return it('should allow to iterate throught the vector in reverse order', function() {
        var i, v, _i;
        v = new jstl.vector();
        for (i = _i = 0; _i <= 10; i = ++_i) {
          v.push_back(i);
        }
        i = 10;
        return jstl.foreach(v.rbegin(), v.rend(), function(e) {
          assert.equal(e, i);
          return i--;
        });
      });
    });
    describe('#clone', function() {
      return it('should clone a vector', function() {
        var i, v, v2, _i;
        v = new jstl.vector();
        for (i = _i = 1; _i <= 10; i = ++_i) {
          v.push_back(i);
        }
        v2 = v.clone();
        assert.equal(v2.size(), 10);
        v.push_back(11);
        return assert.equal(v2.size(), 10);
      });
    });
    describe('#swap', function() {
      return it('should swap the vector content', function() {
        var i, v, v2, _i, _j;
        v = new jstl.vector();
        for (i = _i = 1; _i <= 10; i = ++_i) {
          v.push_back(i);
        }
        v2 = new jstl.vector();
        for (i = _j = 1; _j <= 20; i = ++_j) {
          v2.push_back(i);
        }
        v.swap(v2);
        assert.equal(v.size(), 20);
        return assert.equal(v2.size(), 10);
      });
    });
    return describe('#erase', function() {
      return it('should erases elements ', function() {
        var i, v, _i, _j;
        v = new jstl.vector();
        for (i = _i = 0; _i <= 10; i = ++_i) {
          v.push_back(i);
        }
        v.erase(v.begin().add(1));
        assert.equal(v.get(1), 2);
        v.eraseRange(v.begin(), v.end().sub(1));
        assert.equal(v.get(0), 10);
        v = new jstl.vector();
        for (i = _j = 0; _j <= 10; i = ++_j) {
          v.push_back(i);
        }
        v.erase(v.rbegin().add(1));
        assert.equal(v.get(9), 10);
        v.eraseRange(v.rbegin(), v.rend().sub(1));
        return assert.equal(v.get(0), 0);
      });
    });
  });

}).call(this);

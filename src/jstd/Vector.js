// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jstd.vector = (function() {

    function vector() {
      this.array = [];
    }

    vector.prototype.clone = function() {
      var v;
      v = new jstd.vector();
      v.insertRange(v.begin(), this.begin(), this.end());
      return v;
    };

    vector.prototype.copy = function(obj) {
      var v;
      v = obj.clone();
      return this.swap(obj);
    };

    vector.prototype.at = function(idx) {
      if (idx < 0 || idx >= this.size()) {
        throw new jstd.out_of_range();
      }
      return this.get(idx);
    };

    vector.prototype.get = function(idx) {
      return this.array[idx];
    };

    vector.prototype.set = function(idx, value) {
      return this.array[idx] = value;
    };

    vector.prototype.back = function() {
      return this.array[this.size() - 1];
    };

    vector.prototype.front = function() {
      return this.array[0];
    };

    vector.prototype.data = function() {
      return this.array;
    };

    vector.prototype.push_back = function(value) {
      return this.array.push(value);
    };

    vector.prototype.pop_back = function(value) {
      return this.array.pop();
    };

    vector.prototype.size = function() {
      return this.array.length;
    };

    vector.prototype.empty = function() {
      return this.size() === 0;
    };

    vector.prototype.resize = function(size) {
      var _results;
      if (size < 0) {
        size = 0;
      }
      if (size < this.size()) {
        this.eraseRange(jstd.advance(this.begin(), size), this.end());
      }
      _results = [];
      while (this.size() < size) {
        _results.push(this.array.push(null));
      }
      return _results;
    };

    vector.prototype.clear = function() {
      return this.resize(0);
    };

    vector.prototype.swap = function(obj) {
      var _ref, _ref1;
      _ref = [obj.array, this.array], this.array = _ref[0], obj.array = _ref[1];
      return _ref1 = [obj.idx, this.idx], this.idx = _ref1[0], obj.idx = _ref1[1], _ref1;
    };

    vector.prototype.begin = function() {
      return new this.iterator(this, 0);
    };

    vector.prototype.end = function() {
      return new this.iterator(this, this.size());
    };

    vector.prototype.rbegin = function() {
      return new jstd.reverse_iterator(this.end());
    };

    vector.prototype.rend = function() {
      return new jstd.reverse_iterator(this.begin());
    };

    vector.prototype.insert = function(it, value) {
      this.array.splice(it.value(), 0, value);
      return it.add(1);
    };

    vector.prototype.insertRange = function(it, first, last) {
      return jstd.copy(first, last, jstd.inserter(this, it));
    };

    vector.prototype.erase = function(it) {
      this.array.splice(it.value(), 1);
      return it.next();
    };

    vector.prototype.eraseRange = function(first, last) {
      var _ref;
      if (last.value() < first.value()) {
        _ref = [last.base(), first.base()], first = _ref[0], last = _ref[1];
      }
      return this.array.splice(first.value(), Math.abs(first.idx - last.idx));
    };

    vector.prototype.toString = function() {
      return "[" + (this.array.join(',')) + "]";
    };

    vector.prototype.iterator = (function(_super) {

      __extends(iterator, _super);

      function iterator(vector, idx) {
        this.vector = vector;
        this.idx = idx;
        iterator.__super__.constructor.call(this, jstd.iterator.TYPE_RANDOM);
      }

      iterator.prototype.clone = function() {
        return new iterator(this.vector, this.idx);
      };

      iterator.prototype.copy = function(obj) {
        var i;
        i = obj.clone();
        return this.swap(i);
      };

      iterator.prototype.swap = function(obj) {
        var _ref, _ref1;
        _ref = [obj.vector, this.vector], this.vector = _ref[0], obj.vector = _ref[1];
        return _ref1 = [obj.idx, this.idx], this.idx = _ref1[0], obj.idx = _ref1[1], _ref1;
      };

      iterator.prototype.get = function() {
        return this.vector.get(this.idx);
      };

      iterator.prototype.set = function(value) {
        return this.vector.set(this.idx, value);
      };

      iterator.prototype.value = function() {
        return this.idx;
      };

      iterator.prototype.next = function() {
        this.idx++;
        return this;
      };

      iterator.prototype.prev = function() {
        this.idx--;
        return this;
      };

      iterator.prototype.eq = function(it) {
        return this.idx === it.idx;
      };

      iterator.prototype.lt = function(it) {
        return this.idx < it.idx;
      };

      iterator.prototype.neq = function(it) {
        return !this.eq(it);
      };

      iterator.prototype.lte = function(it) {
        return this.lt(it) || this.eq(it);
      };

      iterator.prototype.gt = function(it) {
        return !this.lte(it);
      };

      iterator.prototype.gte = function(it) {
        return this.gt(it) || this.eq(it);
      };

      iterator.prototype.add = function(v) {
        return new iterator(this.vector, this.idx + v);
      };

      iterator.prototype.sub = function(v) {
        return new iterator(this.vector, this.idx - v);
      };

      return iterator;

    })(jstd.iterator);

    return vector;

  })();

  module.exports = jstd;

}).call(this);

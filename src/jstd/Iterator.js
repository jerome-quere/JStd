// Generated by CoffeeScript 1.4.0
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  jstd.iterator = (function() {

    iterator.TYPE_INPUT = 1;

    iterator.TYPE_OUTPUT = 2;

    iterator.TYPE_FORWARD = 3;

    iterator.TYPE_BIDIRECTIONAL = 4;

    iterator.TYPE_RANDOM = 5;

    function iterator(type) {
      this.type = type;
    }

    iterator.prototype.getType = function() {
      return this.type;
    };

    return iterator;

  })();

  jstd.advance = function(i, n) {
    var p, _i;
    if (i.getType() === jstd.iterator.TYPE_RANDOM) {
      i.copy(i.add(n));
      return i;
    }
    for (p = _i = 0; 0 <= n ? _i <= n : _i >= n; p = 0 <= n ? ++_i : --_i) {
      i.next();
    }
    return i;
  };

  jstd.distance = function(first, second) {
    var i;
    if (first.getType() === jstd.iterator.TYPE_RANDOM) {
      return Math.abs(second.value() - first.value());
    }
    first = first.clone();
    i = 0;
    while (first.neq(second)) {
      first.next();
      ++i;
    }
    return i;
  };

  jstd.reverse_iterator = (function(_super) {

    __extends(reverse_iterator, _super);

    function reverse_iterator(baseIt) {
      reverse_iterator.__super__.constructor.call(this, baseIt.getType());
      this.baseIt = baseIt.clone();
    }

    reverse_iterator.prototype.clone = function() {
      return new reverse_iterator(this.baseIt);
    };

    reverse_iterator.prototype.copy = function(obj) {
      var i;
      i = obj.clone();
      return this.swap(i);
    };

    reverse_iterator.prototype.swap = function(obj) {
      var _ref;
      return _ref = [obj.baseIt, this.baseIt], this.baseIt = _ref[0], obj.baseIt = _ref[1], _ref;
    };

    reverse_iterator.prototype.base = function() {
      return this.baseIt;
    };

    reverse_iterator.prototype.get = function() {
      return this.baseIt.sub(1).get();
    };

    reverse_iterator.prototype.set = function(value) {
      return this.baseIt.sub(1).set(value);
    };

    reverse_iterator.prototype.value = function() {
      return this.baseIt.sub(1).value();
    };

    reverse_iterator.prototype.next = function() {
      return this.baseIt.prev();
    };

    reverse_iterator.prototype.prev = function() {
      return this.baseIt.next();
    };

    reverse_iterator.prototype.eq = function(it) {
      return this.baseIt.eq(it.baseIt);
    };

    reverse_iterator.prototype.lt = function(it) {
      return this.baseIt.lt(it.baseIt);
    };

    reverse_iterator.prototype.neq = function(it) {
      return !this.eq(it);
    };

    reverse_iterator.prototype.lte = function(it) {
      return this.lt(it) || this.eq(it);
    };

    reverse_iterator.prototype.gt = function(it) {
      return !this.lte(it);
    };

    reverse_iterator.prototype.gte = function(it) {
      return this.gt(it) || this.eq(it);
    };

    reverse_iterator.prototype.add = function(n) {
      return new reverse_iterator(this.baseIt.sub(n));
    };

    reverse_iterator.prototype.sub = function(n) {
      return new reverse_iterator(this.baseIt.add(n));
    };

    return reverse_iterator;

  })(jstd.iterator);

  jstd.inserter = function(container, it) {
    return new jstd.insert_iterator(container, it);
  };

  jstd.back_inserter = function(container) {
    return new jstd.back_insert_iterator(container);
  };

  jstd.front_inserter = function(container) {
    return new jstd.front_insert_iterator(container);
  };

  jstd.insert_iterator = (function(_super) {

    __extends(insert_iterator, _super);

    function insert_iterator(container, it) {
      this.container = container;
      this.it = it;
      insert_iterator.__super__.constructor.call(this, jstd.iterator.TYPE_OUTPUT);
    }

    insert_iterator.prototype.clone = function() {
      return new insert_iterator(this.container, this.it);
    };

    insert_iterator.prototype.copy = function(obj) {
      return this.swap(obj.clone());
    };

    insert_iterator.prototype.get = function() {};

    insert_iterator.prototype.set = function(value) {
      return this.it = this.container.insert(this.it, value);
    };

    insert_iterator.prototype.next = function() {};

    return insert_iterator;

  })(jstd.iterator);

  jstd.back_insert_iterator = (function(_super) {

    __extends(back_insert_iterator, _super);

    function back_insert_iterator(container) {
      this.container = container;
      back_insert_iterator.__super__.constructor.call(this, jstd.iterator.TYPE_OUTPUT);
    }

    back_insert_iterator.prototype.clone = function() {
      return new back_insert_iterator(this.container);
    };

    back_insert_iterator.prototype.copy = function(obj) {
      return this.swap(obj.clone());
    };

    back_insert_iterator.prototype.get = function() {};

    back_insert_iterator.prototype.set = function(value) {
      return this.container.push_back(value);
    };

    back_insert_iterator.prototype.next = function() {};

    return back_insert_iterator;

  })(jstd.iterator);

  jstd.front_insert_iterator = (function(_super) {

    __extends(front_insert_iterator, _super);

    function front_insert_iterator(container) {
      this.container = container;
      front_insert_iterator.__super__.constructor.call(this, jstd.iterator.TYPE_OUTPUT);
    }

    front_insert_iterator.prototype.clone = function() {
      return new front_insert_iterator(this.container);
    };

    front_insert_iterator.prototype.copy = function(obj) {
      return this.swap(obj.clone());
    };

    front_insert_iterator.prototype.get = function() {};

    front_insert_iterator.prototype.set = function(value) {
      return this.container.push_front(value);
    };

    front_insert_iterator.prototype.next = function() {};

    return front_insert_iterator;

  })(jstd.iterator);

}).call(this);
